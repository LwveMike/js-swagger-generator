#!/usr/bin/env node
'use strict';

/*eslint-disable no-console*/

// stdlib
const colors = require('colors')

// 3rd-party
const argparse = require('argparse')
const Engine = require('../engine/Engine.js')
const Logger = require('../engine/Logger')

// help vars
const outputPad = 2

/////
const cli = new argparse.ArgumentParser({
  prog: 'js-swagger',
  version: require('../package.json').version,
  addHelp: true
})

cli.addArgument([ '-c', '--client' ], {
  help:   'Http client backend which will be used in generated code, (axios, fetch, superagent)',
  action: 'storeTrue',
  choices: ['axios', 'fetch', 'superagent'],
  defaultValue: 'axios'
});

cli.addArgument([ '-l', '--language' ], {
  help:   'For each language will be generated code (ts - typescript, es - javascript es5 and above, js - for poor js)',
  defaultValue: 'es',
  choices: ['es', 'ts', 'js'],
  action: 'storeTrue'
});

cli.addArgument([ '-p', '--parameters' ], {
  help:   'Render parameters definition for each method, to use it separately',
  defaultValue: true,
  action: 'storeTrue'
});

cli.addArgument([ '-t', '--trace' ], {
  help:   'Show stack trace on error',
  action: 'storeTrue'
});

// cli.addArgument([ '-li' ], {
//   help: 'Linter to use [eslint, js-beautify]',
//   defaultValue: false
// });
//
// cli.addArgument([ '-li-rc' ], {
//   help: 'Linter configuration file',
//   defaultValue: false
// });

cli.addArgument([ 'file' ], {
  help:   'Swagger/Open API version 3.0 file to read, utf-8 encoded without BOM',
  nargs:  '?',
  defaultValue: '-'
});

cli.addArgument([ 'destination' ], {
  help:   'Destination folder, where generated code will be saved',
  nargs: '?',
  defaultValue: '-'
});

////////////////////////////////////////////////////////////////////////////////

var options = cli.parseArgs();

////////////////////////////////////////////////////////////////////////////////

if (options.file === '-') {
  console.error('Error: '.red)
  console.error(''.padStart(outputPad), 'Swagger/Open API file path is required')
  return process.exit(1)
}

if (options.destination === '-') {
  console.error('Error: '.red)
  console.error(''.padStart(outputPad), 'Destination folder is required')
  return process.exit(1)
}

console.info('Parameters: '.blue)
const table = [
  [''.padStart(outputPad, ' '), 'Swagger file: '.yellow, options.file],
  [''.padStart(outputPad, ' '), 'Destination:  '.yellow, options.destination],
  [''.padStart(outputPad, ' '), 'Language:     '.yellow, options.language],
  [''.padStart(outputPad, ' '), 'HTTP client:  '.yellow, options.client]
]

table.forEach(row => console.info(...row))

const engine = new Engine(options)

const render = async () => {
  try {
    Logger.setTrace(options.trace)
    return await engine
      .generate()
      .then(() => {
        console.info('Done !')
        return process.exit(0)
      })
      .catch(e => {
        console.error('Error:'.red)
        console.error(''.padStart(outputPad), e)
        return process.exit(1)
      })
  } catch (e) {
    console.error('Error:'.red)
    console.error(''.padStart(outputPad), e)
    return process.exit(1)
  }
}

render()
