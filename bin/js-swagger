#!/usr/bin/env node
'use strict';

/*eslint-disable no-console*/

// 3rd-party
const { Command, Option } = require('commander')
const Engine = require('../engine/Engine.js')
const Logger = require('../engine/Logger')

// help vars
const outputPad = 2

/////
const program = new Command()

program.version('0.2.3')
program.allowUnknownOption()
program.arguments('<source> <destination>')

program.option('-v, --version', 'Output version and exit')

program
  .addOption(
    new Option('-c, --client <client>', 'Http client backend which will be used in generated code, (axios, fetch, superagent)')
      .choices(['axios', 'fetch', 'superagent'])
      .default('axios')
  )

program
  .addOption(
    new Option('-l, --language <language>', 'For each language will be generated code (ts - typescript, es - javascript es5 and above, js - for poor js)')
      .choices(['es', 'ts', 'js'])
      .default('es')
  )

program.option('-p, --parameters', 'Render parameters definition for each method, to use it separately', true)
program.option('-u, --urls', 'Render url definition for each method, to use it separately', true)
program.option('-t, --trace', 'Show stack trace on error', false)
program.option('-f, --file', 'Swagger/Open API version 3.0 file to read, utf-8 encoded without BOM', '-')
program.option('-d, --destination', 'Destination folder, where generated code will be saved', '-')
program.option('-n, --no-useless-payload', 'Remove properties from payload, which used in queries', false)

////////////////////////////////////////////////////////////////////////////////
let options
try {
  program.parse()
  options = program.opts()
} catch (e) {
  console.error(e)
}

////////////////////////////////////////////////////////////////////////////////
const [source = '-', destination = '-'] = program.args

options.file = source || options.file
options.destination = destination || options.destination
options.uselessPayload = Boolean(process.argv.find(a => /^-n$/.test(a)))

if (options.file === '-') {
  console.error('Error: ')
  console.error(''.padStart(outputPad), 'Swagger/Open API file path is required')
  return process.exit(1)
}

if (options.destination === '-') {
  console.error('Error: ')
  console.error(''.padStart(outputPad), 'Destination folder is required')
  return process.exit(1)
}

console.info('Parameters: ')
const table = [
  [''.padStart(outputPad, ' '), 'Swagger file: ', options.file],
  [''.padStart(outputPad, ' '), 'Destination:  ', options.destination],
  [''.padStart(outputPad, ' '), 'Language:     ', options.language],
  [''.padStart(outputPad, ' '), 'HTTP client:  ', options.client],
  [''.padStart(outputPad, ' '), 'Useless payload:  ', options.uselessPayload]
]

table.forEach(row => console.info(...row))

const engine = new Engine(options)

const render = async () => {
  try {
    Logger.setTrace(options.trace)
    return await engine
      .generate()
      .then(() => {
        console.info('Done !')
        return process.exit(0)
      })
      .catch(e => {
        console.error('Error:')
        console.error(''.padStart(outputPad), e)
        return process.exit(1)
      })
  } catch (e) {
    console.error('Error:')
    console.error(''.padStart(outputPad), e)
    return process.exit(1)
  }
}

render()
